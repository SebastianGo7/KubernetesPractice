# Resource Quota



# Display actual resource quota
k get no
k get resourcequota
k get all


# Define resource quota, set 1 cpu core
# and 500M of Memory and 5 pods
vi rq.yaml
# inside
apiVersion: v1
kind: ResourceQuota
metadata:
        name: myquota
spec:
    hard:
        cpu: 1000m
        memory: 500M
        pods: 5


# Create resource quota
k apply -f rq.yaml
k get resourcequota

# Set Memory to Minimum 200M, Max 300M 
vi pod.yaml
apiVersion: v1
kind: Pod
metadata:
  creationTimestamp: null
  labels:
    run: podpractice
  name: podpractice
spec:
  containers:
  - image: sebastiango/firstimage:2.0
    name: podpractice
    ports:
    - containerPort: 8080
    resources:
      requests:
        cpu: 0.1m
        memory: 200M
      limits:
        cpu: 0.2m 
        memory: 300M
  dnsPolicy: ClusterFirst
  restartPolicy: Always
status: {}


# Create Pod
k apply -f pod.yaml
k get po

# Display memory of resourcequota used
k get resourcequota

# Create a second pod
cp pod.yaml pod1.yaml

# Change labels
# set mimimum and maximum memory to 400
# therefore it exceeds the resource quota
vi pod1.yaml
# inside
apiVersion: v1
kind: Pod
metadata:
  creationTimestamp: null
  labels:
    run: podpractice1
  name: podpractice1
spec:
  containers:
  - image: sebastiango/firstimage:2.0
    name: podpractice
    ports:
    - containerPort: 8080
    resources:
      requests:
        cpu: 0.1m
        memory: 400M
      limits:
        cpu: 0.2m
        memory: 400M
  dnsPolicy: ClusterFirst
  restartPolicy: Always
status: {}



# Trying to apply pod, return message is that 
# it exceeds the 
k apply -f pod1.yaml

# Delete Pods
k delete po podpractice

